(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



BeginPackage["Helpers`"];


absTiming::usage="Print time used in evaluating enclsed expressions";
ClearCache::usage="Delete all values except for definitions using patterns"; 
enum::usage="";
zip::usage="";
displayTable::usage="";
exportIfNeeded::usage="Wraps Export, but only exports if file does not already exist.";


ct::usage="";
sym::usage="";
linIndep::usage="";
subspaceIntersect::usage="";
ZeroTensorQ::usage="";
padToSquare::usage="Pad m and b so that mx=b is a square system"


Begin["`Private`"];


(* print time used in evaluating enclsed expressions *)
absTiming[expr_]:=Module[{timing,output},
{timing,output}=AbsoluteTiming[expr];
Print["Time spent: ",timing];
output
];
SetAttributes[absTiming,HoldAll];


ClearCache[f_]:=Module[{},
DownValues[f]=DeleteCases[DownValues[f],_?(FreeQ[First[#],Pattern]&)];
OwnValues[f]={};
]
SetAttributes[ClearCache,HoldAll];


enum[list_List]:=Table[{i,list[[i]]},{i,Length[list]}]
zip[a_List,b_List]:=Transpose[{a,b}]
displayTable[table_,rows_,columns_]:={{""}~Join~(Rotate[#,90Degree]&/@columns)}~Join~Join[Transpose[{rows}],table,2]//TableForm
exportIfNeeded[filename_String,expr_]:=If[!FileExistsQ[filename],Export[filename,expr]]


ct[t1_,t2_,i1_Integer,i2_Integer]:=Module[{n1,n2,j1,j2},
n1=Length[Dimensions[t1]];
n2=Length[Dimensions[t2]];
If[i1<1||i1>n1||i2<1||i2>n2,Throw["One of more index is out of bound."]];
j1=Table[Which[i<i1,i,i==i1,n1,True,i-1],{i,n1}];
j2=Table[Which[i<i2,i+1,i==i2,1,True,i],{i,n2}];
Transpose[t1,j1].Transpose[t2,j2]
];


sym[t_]:=Sum[Transpose[t,{1}~Join~perm],{perm, Permutations[Range[2,Length[Dimensions[t]]]]}];


linIndep[S_?ArrayQ]:=Module[{reduced,pivots},
reduced=RowReduce[Transpose[S]];
pivots=Flatten[Table[Position[row,1,1,1],{row,reduced}]]; (*this should conveniently remove results from rows of zeros as well*)
S[[pivots]]
];


subspaceIntersect[S1_?ArrayQ,T1_?ArrayQ]:=Module[{S,T,d,reduced,zerorow,relations,multipliers},
{S,T}=linIndep/@{S1,T1};
d=Dimensions[S][[2]];
reduced=RowReduce[Transpose[Transpose[S~Join~T]~Join~IdentityMatrix[Length[S]+Length[T]]]];
zerorow=Table[0,{d}];
relations=Select[reduced,(Take[#,d]==zerorow)&];
If[relations=={},Return[{zerorow}]];
multipliers=Take[#,-Length[T]]&/@relations;
-multipliers.T (*minus sign just for asthetics*)
];


ZeroTensorQ[L_List]:=Module[{l=Flatten[L]},Count[l,0]==Length[l]];


padToSquare[m_,b_]:=Module[{max},
max=Max@@Dimensions[m];
{PadRight[m,{max,max}],PadRight[b,max]}
]


End[];
EndPackage[];
